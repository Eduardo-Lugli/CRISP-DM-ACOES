# -*- coding: utf-8 -*-
"""API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F63QGLBPIPgCXVd0ymPG5OX-qqW9uQKD

**Importação das Bibliotecas**
"""

!pip install flask

from flask import Flask, request, jsonify
import pandas as pd
import joblib
from datetime import datetime, timedelta
import numpy as np
from google.colab import drive
from keras.models import load_model

app = Flask(__name__)

# Caminho do diretório de encoders e modelos
drive.mount('/content/drive')
directory_path_encoder = "/content/drive/MyDrive/Colab Notebooks/Encoders_Modelo"

# Carregar modelos e encoders
scaler_price = joblib.load(f'{directory_path_encoder}/scaler_price.pkl')
scaler_timestamp = joblib.load(f'{directory_path_encoder}/scaler_timestamp.pkl')
encoder = joblib.load(f'{directory_path_encoder}/encoder.pkl')
model = load_model(f'{directory_path_encoder}/lstm_cnn_attention_model.keras')

@app.route('/previsao', methods=['POST'])
def prever():
    # Receber arquivo CSV
    file = request.files['file']
    df = pd.read_csv(file)

    # Transformações nos dados
    df['Data do pregão'] = pd.to_datetime(df['Data do pregão'])
    df['Data do pregão'] = df['Data do pregão'].map(pd.Timestamp.timestamp)
    df['Preço do último negócio normalizado'] = scaler_price.transform(df[['Preço do último negócio']])
    df['Data do pregão normalizado'] = scaler_timestamp.transform(df[['Data do pregão']])
    df['Código de negociação'] = df['Código de negociação'].astype(str)
    encoded_features = encoder.transform(df[['Código de negociação']])
    encoded_feature_names = encoder.get_feature_names_out(['Código de negociação'])
    df_encoded = pd.DataFrame(encoded_features.toarray(), columns=encoded_feature_names, index=df.index)
    df_final = pd.concat([df, df_encoded], axis=1)
    feature_columns = ['Preço do último negócio normalizado', 'Data do pregão normalizado'] + list(encoded_feature_names)
    data = df_final[feature_columns].values

    # Iniciar previsões
    start_date = df['Data do pregão'].max()
    acoes_interesse = ['VALE3', 'PETR4', 'ITUB4', 'BBDC4', 'B3SA3']
    results = []

    for day in range(30):
        current_date = pd.to_datetime(start_date, unit='s') + timedelta(days=day + 1)
        for acao in acoes_interesse:
            action_encoded = encoder.transform(pd.DataFrame([acao], columns=['Código de negociação'])).toarray()[0]
            new_row = np.concatenate([data[-1, :-len(acoes_interesse)], action_encoded])
            input_data = np.vstack([data[-59:, :], new_row.reshape(1, -1)])

            if input_data.shape[0] == 60:
                X = input_data.reshape(1, 60, -1)
                prediction = model.predict(X)
                predicted_price = scaler_price.inverse_transform(prediction.reshape(1, -1))[0][0]

                results.append({
                    'Data do pregão': (current_date + timedelta(days=day)).strftime('%Y-%m-%d'),
                    'Código de negociação': acao,
                    'Preço previsto': predicted_price
                })

                new_row[0] = prediction.flatten()[0]
                data = np.vstack([data, new_row])

    df_results = pd.DataFrame(results)
    return df_results.to_json()

if __name__ == '__main__':
    app.run(debug=True)